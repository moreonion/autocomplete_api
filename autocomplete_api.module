<?php

/**
 * @file
 * Hook implementations for the autocomplete_api module.
 */

use Drupal\autocomplete_api\Client;
use Drupal\autocomplete_api\FormBuilderElementAutocomplete;
use Drupal\autocomplete_api\Value;

/**
 * Implements hook_element_info().
 */
function autocomplete_api_element_info() {
  $elements['autocomplete_api_select'] = [
    '#theme' => 'autocomplete_api_select',
    '#theme_wrappers' => ['form_element'],
    '#input' => TRUE,
    '#process' => ['autocomplete_api_element_process'],
    '#dataset_key' => NULL,
    '#autocomplete_path' => FALSE,
    '#multiple' => FALSE,
    '#default_options' => [],
  ];
  return $elements;
}

/**
 * Implements hook_theme().
 */
function autocomplete_api_theme() {
  $hooks['autocomplete_api_select'] = [
    'render element' => 'element',
  ];
  return $hooks;
}

/**
 *
 */
function theme_autocomplete_api_select($variables) {
  $variables['element']['#options'] = $variables['element']['#default_options'];
  return theme_select($variables);
}

/**
 * Form element process callback for the autocomplete element-type.
 */
function autocomplete_api_element_process($element, &$form_state) {
  if (empty($element['#dataset_key'])) {
    return $element;
  }
  if (empty($element['#id'])) {
    $element['#id'] = drupal_html_id('autocomplete-element');
  }
  $element['#element_validate'][] = '_autocomplete_api_element_validate';
  $client = Client::fromConfig($element['#dataset_key']);
  if ($default = $element['#default_value']) {
    $element['#default_value'] = $client->encodeValue($default);
    $element['#default_options'] = [$element['#default_value'] =>  $default['label']];
  }
  $element['#options'] = $element['#default_options'];
  form_process_select($element);
  $element['#default_options'] = $element['#options'];
  unset($element['#options']);

  $endpoint = variable_get_value('autocomplete_api_api_endpoint');
  $settings['autocomplete_api'] = $client->getJsConfig();
  $element_config = [];
  if (!empty($element['#placeholder'])) {
    $element_config['placeholder'] = $element['#placeholder'];
    if (!$element['#multiple'] && !isset($element['#default_options'][''])) {
      array_unshift($element['#default_options'], ['' => $element['#placeholder']]);
    }
  }
  $settings['autocomplete_api']['elements'][$element['#id']] = $element_config;
  $element['#attached']['js'][] = ['data' => $settings, 'type' => 'setting'];

  $variant = variable_get('select2_compression_type', 'minified');
  $element['#attached']['libraries_load'][] = ['select2', $variant];

  $dir = drupal_get_path('module', 'autocomplete_api');
  $element['#attached']['js'][] = [
    'data' => $dir . '/autocomplete-api.js',
    'scope' => 'footer',
  ];

  return $element;
}

/**
 * Validate the value submitted for the webform component.
 *
 * Callback for _form_validate().
 */
function _autocomplete_api_element_validate($element, &$form_state, $form) {
  $client = Client::fromConfig($element['#dataset_key']);
  $value = drupal_json_decode($element['#value']);
  if (!$client->verifySignature($value)) {
    form_error($element, 'Invalid data submitted.');
  }
  form_set_value($element, Value::decode($element['#value']), $form_state);
}

/**
 * Implements hook_webform_component_info().
 */
function autocomplete_api_webform_component_info() {
  // Component types may only have 16 chars. So we can't use our namespace.
  $component_info['autocomplete'] = [
    'label' => t('Autocomplete widget'),
    'description' => t('Allows users to select values using an auto-complete text-field.'),
    'file' => 'autocomplete_api.component.inc',
    'features' => [
      'conditional' => TRUE,
      'placeholder' => TRUE,
    ],
    'conditional_type' => 'autocomplete',
  ];
  return $component_info;
}

/**
 * Implements hook_webform_conditional_operator_info().
 */
function autocomplete_api_webform_conditional_operator_info() {
  $operators['autocomplete']['equal'] = [
    'label' => t('is'),
    'comparison callback' => '_webform_conditional_comparison_autocomplete_equal',
    'js comparison callback' => 'conditionalOperatorAutocompleteEqual',
  ];
  $operators['autocomplete']['not_equal'] = [
    'label' => t('is not'),
    'comparison callback' => '_webform_conditional_comparison_autocomplete_not_equal',
    'js comparison callback' => 'conditionalOperatorAutocompleteNotEqual',
  ];
  return $operators;
}

/**
 * Implements hook_form_builder_element_types().
 *
 * Defines a new form_builder field:
 * - 'title'
 * - in which ['palette_group'] it appears.
 * - it's ['default'] representation (is used when dragging it into the preview
 *   area) including:
 *   - ['#webform_component'] the component array for webform (most important
 *     it's ['#webform_component']['type'].
 *   - ['#type'] the form-API type is used as the default form_builder
 *     element_type.
 *   - ['#form_builder'] the form_builder type (again).
 * - whether or not the field is ['unique'].
 *
 * Fields are defined per form_type (so far only 'webform' is relevant for us).
 *
 * @see hook_form_builder_palette_groups()
 * @see hook_webform_component_info()
 * @see hook_form_builder_element_types()
 */
function autocomplete_api_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  module_load_include('components.inc', 'form_builder_webform');
  $fields['autocomplete'] = [
    'title' => t('Autocomplete select'),
    'class' => FormBuilderElementAutocomplete::class,
    'default' => [
      '#form_builder' => ['element_type' => 'autocomplete'],
    ] + _form_builder_webform_default('autocomplete'),
  ];
  $map = _form_builder_webform_property_map('autocomplete');
  $fields['autocomplete']['properties'] = array_keys($map['properties']);
  return $fields;
}
